const m=a=>Object.entries(a).filter(([t,e])=>e!=null&&e!=="").map(([t,e])=>`${encodeURIComponent(t)}=${encodeURIComponent(e)}`).join("&"),l=async a=>{switch(a.status){case 401:return window.location.replace("/login");case 400:const t=await a.json();return alert(`${t.error}, please try again!`),[];default:return alert("Something went wrong. Please reload the app!"),""}},s=async a=>{const t=await fetch(a,{method:"GET",credentials:"same-origin"});try{if(t.ok)return await t.json();l(t)}catch(e){console.log(e)}},p=async a=>await s(a),n=async(a,t,e)=>await fetch(a,{method:t,headers:{"Content-Type":"application/json"},credentials:"same-origin",body:JSON.stringify(e)}),h=async()=>await s("/api/v1/medias"),w=(a,t=0)=>{const e=m({...a,pageNumber:t});return s(`/api/v1/stream?${e}`)},y=async()=>await s("/api/v1/medias/devices"),f=async()=>{const a=await s("/api/v1/album/statistic");return a?a[0]:null},u=async()=>await s("/api/v1/album"),v=async()=>await s("/api/v1/album/collection"),g=async(a,t,e)=>await n("/api/v1/album/add","PUT",{mediaIds:a,albumId:t,albumTitle:e}),b=async(a,t)=>await n("/api/v1/album/remove","PUT",{mediaIds:a,albumId:t}),T=async(a,t,e)=>await n("/api/v1/medias","PUT",{mediaIds:a,updateKey:t,updateValue:e}),S=async a=>await n("/api/v1/medias","DELETE",{mediaIds:a}),D=async a=>await n("/api/v1/medias/download","POST",{mediaIds:a}),E=async()=>await s("/api/v1/medias/recently"),P=async()=>await s("/api/v1/medias/merge-all"),U=async(a,t)=>await n("/api/v1/media/caption","PUT",{mediaId:a,caption:t}),R=async(a,t)=>await n("/api/v1/media/live-frame","PUT",{mediaId:a,framePos:t}),$=async a=>await s(`/api/v1/media?id=${a}`),i=async(a,t)=>{try{if(!a.ok){const o=await a.json();return t("mesg",o.error)}if(!a.body)throw new Error("Stream response body is empty");const e=a.body.getReader(),c=new TextDecoder;for(;;){const{value:o,done:r}=await e.read();if(r)break;const d=c.decode(o,{stream:!0});t("mesg",d)}}catch(e){console.log("Error import/upload media",e),t("mesg",`⚠️ ${e}`)}finally{t("isRunning",!1)}},k=async(a,t,e)=>{const c=await fetch(`/api/v1/upload?aimode=${e}`,{method:"POST",credentials:"same-origin",body:t});await i(c,a)},A=async()=>await s("/api/v1/admin/dashboard"),C=async(a,t,e)=>{const c=await n(`/api/v1/admin/${e}`,"POST",{sourcePath:t.path,aimode:t.aimode});await i(c,a)},O=async a=>await n("/api/v1/admin/changeStatus","PUT",{userEmail:a}),j=async a=>{const t=await fetch("/api/v1/admin/backup",{method:"GET",credentials:"same-origin"});await i(t,a)},I=async()=>await s("/api/v1/admin/restore"),L=async a=>{const t=await fetch("/api/v1/admin/storageOptimize",{method:"GET",credentials:"same-origin"});await i(t,a)},x=async a=>{const t=await fetch("/api/v1/admin/reindex",{method:"GET",credentials:"same-origin"});await i(t,a)},G=async a=>{const t=await fetch("/api/v1/admin/rescan-thumb",{method:"GET",credentials:"same-origin"});await i(t,a)},F=async()=>await s("/api/v1/admin/all-logs"),q=async(a,t="system")=>await n("/api/v1/admin/all-logs","DELETE",{ids:a,logType:t}),z=async()=>await s("/api/v1/search/refreshView"),H=async a=>await s(`/api/v1/search?keywords=${a}`),B=async()=>await s("/api/v1/user/serverCapacity");export{x as A,O as B,A as C,n as D,k as E,B as F,p as a,f as b,v as c,H as d,z as e,h as f,y as g,g as h,u as i,b as j,D as k,S as l,$ as m,U as n,E as o,P as p,T as q,R as r,w as s,q as t,F as u,C as v,j as w,I as x,L as y,G as z};
